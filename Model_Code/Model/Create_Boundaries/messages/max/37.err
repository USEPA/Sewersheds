
Due to MODULEPATH changes, the following have been reloaded:
  1) netcdf/4.9.2     2) udunits/2.2.28

The following have been reloaded with a version change:
  1) R/4.3.0 => R/4.4.2             4) hdf5/1.10.8 => hdf5/1.14.5
  2) gdal/3.6.4 => gdal/3.7.3       5) intel/21.4 => intel/24.2
  3) geos/3.11.2 => geos/3.12.0     6) proj/9.2.0 => proj/9.3.0

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
Linking to GEOS 3.12.0, GDAL 3.7.3, PROJ 9.3.0; sf_use_s2() is TRUE

Attaching package: ‘h3’

The following object is masked from ‘package:purrr’:

    compact


Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

Rows: 57 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): state, state_name, state_code

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 1312374 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): H3_Index, CWNS_ID
lgl (1): Sewered

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 906137 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): h3_index, Near_CWNS

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Spherical geometry (s2) switched off
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
Joining with `by = join_by(h3_index)`
although coordinates are longitude/latitude, st_union assumes that they are
planar
There were 50 or more warnings (use warnings() to see the first 50)
although coordinates are longitude/latitude, st_union assumes that they are
planar
